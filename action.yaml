name: image
description: Build image and push to Docker Hub and GitHib Container Registry
author: hyperbola

inputs:
  init:
    description: whether to setup QEMU, buildx and logins
    required: false
    default: 'true'
  dockerhub:
    description: push image to dockerhub
    required: false
    default: 'true'
  ghcr:
    description: push image to ghcr.io
    required: false
    default: 'true'
  dockerhub-username:
    description: dockerhub username
    required: false
  dockerhub-password:
    description: dockerhub API token
    required: false
  image:
    description: name of image
    required: false
  github-token:
    description: github token used to push image to ghcr
    required: false
  platforms:
    description: platform list to build image
    required: false
    default: linux/amd64,linux/arm64,linux/arm/v7
  tag-format:
    description: tag names of images; use '$VERSION' to substitute semver
    required: false
    default: '$VERSION'
  tag-latest:
    description: tag name used for latest tag name
    required: false
    default: latest
  build-target:
    description: target stage to build docker image
    required: false

runs:
  using: composite
  steps:
    - name: Get project version
      id: version
      uses: wdzeng/version@v1
      with:
        prefix: ''
    - name: Determine image tag names
      id: tag
      shell: bash -e {0}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo ::set-output name=tag::${{ inputs.tag-format }}

        VERSION="${{ steps.version.outputs.minor }}"
        echo ::set-output name=tag-minor::${{ inputs.tag-format }}

        VERSION="${{ steps.version.outputs.major }}"
        echo ::set-output name=tag-major::${{ inputs.tag-format }}

        echo ::set-output name=tag-latest::${{ inputs.tag-latest }}
    - name: Determine Dockerhub image names
      id: dockerhub-tags
      if: ${{ inputs.dockerhub == 'true' }}
      shell: bash -e {0}
      run: |
        # Determine username
        USR="${{ inputs.dockerhub-username }}"
        USR="${USR:-${{ github.repository_owner }}}"
        echo ::debug::username=$USR

        # Determine image name
        IMG="${{ inputs.image }}"
        REPO_NAME=${{ github.repository }}
        IMG="${IMG:-${REPO_NAME#*/}}"
        echo ::debug::image=$IMG

        # Determine tag names
        TAGS="$USR/$IMG:${{ steps.tag.outputs.tag }}"
        TAGS="$TAGS,$USR/$IMG:${{ steps.tag.outputs.tag-minor }}"
        TAGS="$TAGS,$USR/$IMG:${{ steps.tag.outputs.tag-major }}"
        TAGS="$TAGS,$USR/$IMG:${{ steps.tag.outputs.tag-latest }}"

        echo ::set-output name=tags::$TAGS
    - name: Determine ghcr image names
      if: ${{ inputs.ghcr == 'true' }}
      id: ghcr-tags
      shell: bash -e {0}
      run: |
        # Determine username
        USR="${{ github.repository_owner }}"
        echo ::debug::username=$USR

        # Determine image name
        IMG="${{ inputs.image }}"
        REPO_NAME=${{ github.repository }}
        IMG="${IMG:-${REPO_NAME#*/}}"
        echo ::debug::image=$IMG

        DOM='ghcr.io'
        echo ::set-output name=image::$DOM/$USR/$IMG

        # Determine tag names
        TAGS="$DOM/$USR/$IMG:${{ steps.tag.outputs.tag }}"
        TAGS="$TAGS,$DOM/$USR/$IMG:${{ steps.tag.outputs.tag-minor }}"
        TAGS="$TAGS,$DOM/$USR/$IMG:${{ steps.tag.outputs.tag-major }}"
        TAGS="$TAGS,$DOM/$USR/$IMG:${{ steps.tag.outputs.tag-latest }}"

        echo ::set-output name=tags::$TAGS
    - name: Determine all image tags
      id: all-tag
      shell: bash -e {0}
      run: |
        if [[ -n "${{ inputs.dockerhub }}" && -n "${{ inputs.ghcr }}" ]]; then
          echo ::set-output name=tags::${{ steps.dockerhub-tags.outputs.tags }},${{ steps.ghcr-tags.outputs.tags }}
        elif [[ -n "${{ inputs.dockerhub }}" ]]; then
          echo ::set-output name=tags::${{ steps.dockerhub-tags.outputs.tags }}
        elif [[ -n "${{ inputs.ghcr }}" ]]; then
          echo ::set-output name=tags::${{ steps.ghcr-tags.outputs.tags }}
        else:
          echo ::error::where do you want to push images?
          exit 1
        fi
    - name: Set up QEMU
      if: ${{ inputs.init == 'true' }}
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      if: ${{ inputs.init == 'true' }}
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      if: ${{ inputs.dockerhub == 'true' && inputs.init == 'true' }}
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-password }}
    - name: Login to ghcr
      if: ${{ inputs.ghcr == 'true' && inputs.init == 'true' }}
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github-token || github.token }}
    - name: Get current timestamp
      id: date
      shell: bash -e {0}
      run: |
        now=$(TZ=Asia/Taipei date -Is)
        echo ::set-output name=now::$now
    - name: Build image and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.all-tag.outputs.tags }}
        target: ${{ inputs.build-target }}
        cache-from: ${{ steps.ghcr-tags.outputs.image }}:${{ steps.tag.outputs.tag-latest }}
        cache-to: type=inline
        labels: |
          org.opencontainers.image.title="${{ github.event.repository.name }}"
          org.opencontainers.image.version="${{ steps.version.outputs.version }}"
          org.opencontainers.image.authors="hyperbola <me@hyperbola.me>"
          org.opencontainers.image.url="https://github.com/${{ github.repository }}"
          org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          org.opencontainers.image.created="${{ steps.date.outputs.now }}"
          org.opencontainers.image.documentation="https://github.com/${{ github.repository }}/blob/master/README.md"
          org.opencontainers.image.revision="${{ github.sha }}"
